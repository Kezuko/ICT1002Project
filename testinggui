#import tkinter as tk                # python 3
#from tkinter import font  as tkfont # python 3
import Tkinter as tk     # python 2
import ttk
from function4 import *
from Function3 import *
from Function3OF import *
from function6 import *
from function6OF import *
import tkFont as tkfont  # python 2
import tkFileDialog as fd
import os
from tkinter.messagebox import showinfo
from top5byYear import *
from procurementbyYear import *
from PIL import ImageTk, Image


def get_file_name(file_entry):
    file_name = fd.askopenfilename(title="Select file", filetypes=(("CSV Files", "*.csv"),))
    file_entry.insert(0, file_name)


class SampleApp(tk.Tk):

    def __init__(self, *args, **kwargs):
        tk.Tk.__init__(self, *args, **kwargs)

        self.title_font = tkfont.Font(family='Helvetica', size=18, weight="bold", slant="italic")

        """image = Image.open('pythonbackground.png')
        photo = ImageTk.PhotoImage(image)
        label = tk.Label(self, image=photo)
        label.image = photo  # keep a reference!
        label.place(x=0, y=0, relwidth=1, relheight=1)"""

        # the container is where we'll stack a bunch of frames
        # on top of each other, then the one we want visible
        # will be raised above the others
        container = tk.Frame(self)
        container.pack(side="top", fill="both", expand=True)
        container.grid_rowconfigure(0, weight=1)
        container.grid_columnconfigure(0, weight=1)

        self.frames = {}
        for F in (PageOne, PageTwo, Function2Page, Function3Page, Function4Page, Function5Page, Function6Page):
            page_name = F.__name__
            frame = F(parent=container, controller=self)
            self.frames[page_name] = frame

            # put all of the pages in the same location;
            # the one on the top of the stacking order
            # will be the one that is visible.
            frame.grid(row=0, column=0, sticky="nsew")

        self.show_frame("PageOne")

    def show_frame(self, page_name):
        '''Show a frame for the given page name'''
        frame = self.frames[page_name]
        frame.tkraise()


"""class StartPage(tk.Frame):

    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        self.controller = controller
        label = tk.Label(self, text="This is the start page", font=controller.title_font)
        label.pack(side="top", fill="x", pady=10)

        button1 = tk.Button(self, text="Go to Page One", command=lambda: controller.show_frame("PageOne"))
        button2 = tk.Button(self, text="Go to Page Two", command=lambda: controller.show_frame("PageTwo"))
        button3 = tk.Button(self, text="Go to Page Three", command=lambda: controller.show_frame("Function3Page"))
        button4 = tk.Button(self, text="Go to Page Four", command=lambda: controller.show_frame("Function4Page"))
        button5 = tk.Button(self, text="Go to Page Five", command=lambda: controller.show_frame("Function5Page"))
        button6 = tk.Button(self, text="Go to Page Six", command=lambda: controller.show_frame("Function6Page"))
        button1.pack()
        button2.pack()
        button3.pack()
        button4.pack()
        button5.pack()
        button6.pack()"""


class PageOne(tk.Frame):

    def get_file_name(file_entry):
        file_name = fd.askopenfilename(title="Select file", filetypes=(("CSV Files", "*.csv"),))
        file_entry.delete(0, tk.END)
        file_entry.insert(0, file_name)

    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        self.controller = controller


        entry_csv = tk.Entry(self, text="", width=80, font=20)
        entry_csv.place(x=250, y=380)
        entry_csv2 = tk.Entry(self, text="", width=80, font=20)
        entry_csv2.place(x=250, y=500)

        label = tk.Label(self, bg="#64dd17", height=10, font=30, text="1002 Dataset Analyzer")
        label.pack(fill="x")

        label = tk.Label(self, text="1st Dataset File: ", font=30)
        label.place(x=100, y=380)

        button = tk.Button(self, text="Browse...", width=10, height=2, command=lambda: get_file_name(entry_csv))
        button.place(x=1000, y=370)

        label = tk.Label(self, text="2nd Dataset File:", font=30)
        label.place(x=100, y=500)

        button = tk.Button(self, text="Browse...", width=10, height=2, command=lambda: get_file_name(entry_csv2))
        button.place(x=1000, y=490)

        button = tk.Button(self, text="Upload", command=lambda: controller.show_frame("PageTwo"), width=10, height=2)
        button.place(x=1250, y=430)



class PageTwo(tk.Frame):

    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        self.controller = controller
        """above codes are important"""

        label = tk.Label(self, bg="#64dd17", height=10, font=30, text="ICT 1002")
        label.pack(fill="x")

        button = tk.Button(self, text="Function 2", height=2, font=100,
                           command=lambda: controller.show_frame("Function2Page"), fg='black', width=50)
        button.place(x=750, y=400)

        button = tk.Button(self, text="Function 3", height=2, font=100,
                           command=lambda: controller.show_frame("Function3Page"),
                           fg='black', width=50)
        button.place(x=750, y=460)

        button = tk.Button(self, text="Function 4", height=2, font=100,
                           command=lambda: controller.show_frame("Function4Page"),
                           fg='black', width=50)
        button.place(x=750, y=520)

        button = tk.Button(self, text="Function 5", height=2, font=100,
                           command=lambda: controller.show_frame("Function5Page"),
                           fg='black', width=50)
        button.place(x=750, y=580)

        button = tk.Button(self, text="Function 6", height=2, font=100,
                           command=lambda: controller.show_frame("Function6Page"),
                           fg='black', width=50)
        button.place(x=750, y=640)


""""---------------------------------------Function 2---------------------------------------------------------------"""
class Function2Page(tk.Frame):


    def WorldCloudFunction(self):
        os.system('python WorldCloud-Terence.py')
        self.image = Image.open('WordCloud.png')
        self.image = self.image.resize((600, 350))
        self.photo = ImageTk.PhotoImage(self.image)
        self.image1location = tk.Label(app, image=self.photo)
        self.image1location.image = self.photo  # keep a reference!
        self.image1location.place(x=680, y= 600)

        self.label1 = tk.Label(app, text="*Please check your folder for a clearer image*")
        self.label1.place(x=850, y=450)

    def machineLearningFunction(self):
        os.system('python LDA-Terence.py')

        self.image = Image.open('MostCommonWord.png')
        self.image = self.image.resize((600, 400))
        self.photo = ImageTk.PhotoImage(self.image)
        self.image2location = tk.Label(app, image=self.photo)
        self.image2location.image = self.photo  # keep a reference!
        self.image2location.place(x=680, y=550)

        self.label2 = tk.Label(app, text="Please check your folder and open a HTML document call ldavis_prepared_5 for the open function")
        self.label2.place(x=750, y=450)
        self.label3 = tk.Label(app, text="The graph below is 10 most common words in Tender Description after cleansing Techniques")
        self.label3.place(x=750, y=500)

    def testing(self):
        self.controller.show_frame("PageTwo")
        self.image1location.destroy()
        self.label1.destroy()

        self.image2location.destroy()
        self.label2.destroy()
        self.label3.destroy()



    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        self.controller = controller
        """above codes are important"""

        self.button = tk.Button(self, text="Back to Menu", height=2, font=100, command=self.testing, fg='black', width=20)
        self.button.place(x=30, y=900)

        self.label = tk.Label(self, bg="#64dd17", height=10, font=30, text="ICT 1002")
        self.label.pack(fill="x")

        self.button = tk.Button(self, text="LDA (Topic MODELLING)", height=2, font=100, command=self.machineLearningFunction, fg='black', width=50)
        self.button.place(x=750, y=350)

        self.button = tk.Button(self, text="WORDCLOUD", height=2, font=100, command=self.WorldCloudFunction, fg='black', width=50)
        self.button.place(x=750, y=400)



""""---------------------------------------Function 3---------------------------------------------------------------"""
class Function3Page(tk.Frame):

    def orderForAtoZ(self):
        try:
            self.treeView.destroy()
        except:
            self.treeView2.destroy()

        # Set up of TreeView
        self.treeView = ttk.Treeview(self, height=35)
        # set up the columns and headings
        # In reality "Member ID" would be exported from the database
        self.treeView.pack(expand="no", fill="both")
        self.treeView["columns"] = ["CompanyName", "AwardedAmount"]
        self.treeView["show"] = "headings"
        self.treeView.heading("CompanyName", text="Company Name")
        self.treeView.heading("AwardedAmount", text="Awarded Amount")
        self.treeView.grid(columnspan=2)
        self.treeView.column("CompanyName", minwidth=0, width=480, stretch="no")
        self.treeView.column("AwardedAmount", minwidth=0, width=200, stretch="no")

        self.treeView.place(x=1000, y=200)
        vsb = ttk.Scrollbar(self, orient="vertical", command=self.treeView.yview)
        vsb.place(x=1685, y=200, height=730)
        self.treeView.configure(yscrollcommand=vsb.set)

        dict = eachSectorTotalAmtProcurementAtoZ("government-procurement-via-gebiz.csv")

        for values in dict.items():
            # for values in dict:
            self.treeView.insert("", 'end', values=values)

    def orderForZtoA(self):
        try:
            self.treeView.destroy()
        except:
            self.treeView2.destroy()

        # Set up of TreeView
        self.treeView = ttk.Treeview(self, height=35)
        # set up the columns and headings
        # In reality "Member ID" would be exported from the database
        self.treeView.pack(expand="no", fill="both")
        self.treeView["columns"] = ["CompanyName", "AwardedAmount"]
        self.treeView["show"] = "headings"
        self.treeView.heading("CompanyName", text="Company Name")
        self.treeView.heading("AwardedAmount", text="Awarded Amount")
        self.treeView.grid(columnspan=2)
        self.treeView.column("CompanyName", minwidth=0, width=480, stretch="no")
        self.treeView.column("AwardedAmount", minwidth=0, width=200, stretch="no")

        self.treeView.place(x=1000, y=200)
        vsb = ttk.Scrollbar(self, orient="vertical", command=self.treeView.yview)
        vsb.place(x=1685, y=200, height=730)
        self.treeView.configure(yscrollcommand=vsb.set)

        dict = eachSectorTotalAmtProcurementZtoA("government-procurement-via-gebiz.csv")
        for values in dict.items():
            # for values in dict:
            self.treeView.insert("", 'end', values=values)

    def ascendingOrder(self):
        try:
            self.treeView.destroy()
        except:
            self.treeView2.destroy()

        # Set up of TreeView
        self.treeView = ttk.Treeview(self, height=35)
        # set up the columns and headings
        # In reality "Member ID" would be exported from the database
        self.treeView.pack(expand="no", fill="both")
        self.treeView["columns"] = ["CompanyName", "AwardedAmount"]
        self.treeView["show"] = "headings"
        self.treeView.heading("CompanyName", text="Company Name")
        self.treeView.heading("AwardedAmount", text="Awarded Amount")
        self.treeView.grid(columnspan=2)
        self.treeView.column("CompanyName", minwidth=0, width=480, stretch="no")
        self.treeView.column("AwardedAmount", minwidth=0, width=200, stretch="no")

        self.treeView.place(x=1000, y=200)
        vsb = ttk.Scrollbar(self, orient="vertical", command=self.treeView.yview)
        vsb.place(x=1685, y=200, height=730)
        self.treeView.configure(yscrollcommand=vsb.set)

        dict = eachSectorTotalAmtProcurementAsc("government-procurement-via-gebiz.csv")
        print dict
        for values in dict.items():
            self.treeView.insert("", 'end', values=values)

    def descendingOrder(self):
        try:
            self.treeView.destroy()
        except:
            self.treeView2.destroy()

        # Set up of TreeView
        self.treeView = ttk.Treeview(self, height=35)
        # set up the columns and headings
        # In reality "Member ID" would be exported from the database
        self.treeView.pack(expand="no", fill="both")
        self.treeView["columns"] = ["CompanyName", "AwardedAmount"]
        self.treeView["show"] = "headings"
        self.treeView.heading("CompanyName", text="Company Name")
        self.treeView.heading("AwardedAmount", text="Awarded Amount")
        self.treeView.grid(columnspan=2)
        self.treeView.column("CompanyName", minwidth=0, width=480, stretch="no")
        self.treeView.column("AwardedAmount", minwidth=0, width=200, stretch="no")

        self.treeView.place(x=1000, y=200)
        vsb = ttk.Scrollbar(self, orient="vertical", command=self.treeView.yview)
        vsb.place(x=1685, y=200, height=730)
        self.treeView.configure(yscrollcommand=vsb.set)

        dict = eachSectorTotalAmtProcurementDsc("government-procurement-via-gebiz.csv")
        print dict
        for values in dict.items():
            self.treeView.insert("", 'end', values=values)

    def openFunction1(self):
        try:
            self.treeView.destroy()
        except:
            self.treeView2.destroy()

        # Set up of TreeView
        self.treeView2 = ttk.Treeview(self, height=35)
        # set up the columns and headings
        # In reality "Member ID" would be exported from the database
        self.treeView2.pack(expand="no", fill="both")
        self.treeView2["columns"] = ["TenderDes", "TenderNo", "Agency", "AwardAmt", "AwardDate", "TenderDetailStatus", "SuppName"]
        self.treeView2["show"] = "headings"
        self.treeView2.heading("TenderDes", text="Tender Description")
        self.treeView2.heading("TenderNo", text="Tender No.")
        self.treeView2.heading("Agency", text="Agency")
        self.treeView2.heading("AwardAmt", text="Awarded Amount")
        self.treeView2.heading("AwardDate", text="Awarded Date")
        self.treeView2.heading("TenderDetailStatus", text="Tender Detail Status")
        self.treeView2.heading("SuppName", text="Supplier Name")
        self.treeView2.grid(columnspan=7)
        self.treeView2.column("TenderDes", minwidth=0, width=300, stretch="no")
        self.treeView2.column("TenderNo", minwidth=0, width=100, stretch="no")
        self.treeView2.column("Agency", minwidth=0, width=100, stretch="no")
        self.treeView2.column("AwardAmt", minwidth=0, width=150, stretch="no")
        self.treeView2.column("AwardDate", minwidth=0, width=100, stretch="no")
        self.treeView2.column("TenderDetailStatus", minwidth=0, width=150, stretch="no")
        self.treeView2.column("SuppName", minwidth=0, width=100, stretch="no")

        self.treeView2.place(x=700, y=200)
        vsb = ttk.Scrollbar(self, orient="vertical", command=self.treeView2.yview)
        vsb.place(x=1685, y=200, height=730)
        self.treeView2.configure(yscrollcommand=vsb.set)

        dict = searchTenderIdNo('userinput')
        for values in dict:
            self.treeView.insert("", 'end', values=values)

    def openFunction2(self):
        try:
            self.treeView.destroy()
        except:
            self.treeView2.destroy()

        # Set up of TreeView
        self.treeView2 = ttk.Treeview(self, height=35)
        # set up the columns and headings
        # In reality "Member ID" would be exported from the database
        self.treeView2.pack(expand="no", fill="both")
        self.treeView2["columns"] = ["UniqueID", "TenderDes", "TenderNo", "Agency", "AwardAmt", "AwardDate", "TenderDetailStatus", "SuppName"]
        self.treeView2["show"] = "headings"
        self.treeView2.heading("UniqueID", text="ID No.")
        self.treeView2.heading("TenderDes", text="Tender Description")
        self.treeView2.heading("TenderNo", text="Tender No.")
        self.treeView2.heading("Agency", text="Agency")
        self.treeView2.heading("AwardAmt", text="Awarded Amount")
        self.treeView2.heading("AwardDate", text="Awarded Date")
        self.treeView2.heading("TenderDetailStatus", text="Tender Detail Status")
        self.treeView2.heading("SuppName", text="Supplier Name")
        self.treeView2.grid(columnspan=8)
        self.treeView2.column("UniqueID", minwidth=0, width=200, stretch="no")
        self.treeView2.column("TenderDes", minwidth=0, width=480, stretch="no")
        self.treeView2.column("TenderNo", minwidth=0, width=200, stretch="no")
        self.treeView2.column("Agency", minwidth=0, width=200, stretch="no")
        self.treeView2.column("AwardAmt", minwidth=0, width=200, stretch="no")
        self.treeView2.column("AwardDate", minwidth=0, width=200, stretch="no")
        self.treeView2.column("TenderDetailStatus", minwidth=0, width=200, stretch="no")
        self.treeView2.column("SuppName", minwidth=0, width=200, stretch="no")

        self.treeView2.place(x=1000, y=200)
        vsb = ttk.Scrollbar(self, orient="vertical", command=self.treeView2.yview)
        vsb.place(x=1685, y=200, height=730)
        self.treeView2.configure(yscrollcommand=vsb.set)

        dict = extract_supplier_not_na_2016()
        for values in dict.items():
            self.treeView2.insert("", 'end', values=values)

    def openFunction3(self):
        try:
            self.treeView.destroy()
        except:
            self.treeView2.destroy()

        # Set up of TreeView
        self.treeView2 = ttk.Treeview(self, height=35)
        # set up the columns and headings
        # In reality "Member ID" would be exported from the database
        self.treeView2.pack(expand="no", fill="both")
        self.treeView2["columns"] = ["UniqueID", "TenderDes", "TenderNo", "Agency", "AwardAmt", "AwardDate", "TenderDetailStatus", "SuppName"]
        self.treeView2["show"] = "headings"
        self.treeView2.heading("UniqueID", text="ID No.")
        self.treeView2.heading("TenderDes", text="Tender Description")
        self.treeView2.heading("TenderNo", text="Tender No.")
        self.treeView2.heading("Agency", text="Agency")
        self.treeView2.heading("AwardAmt", text="Awarded Amount")
        self.treeView2.heading("AwardDate", text="Awarded Date")
        self.treeView2.heading("TenderDetailStatus", text="Tender Detail Status")
        self.treeView2.heading("SuppName", text="Supplier Name")
        self.treeView2.grid(columnspan=8)
        self.treeView2.column("UniqueID", minwidth=0, width=200, stretch="no")
        self.treeView2.column("TenderDes", minwidth=0, width=480, stretch="no")
        self.treeView2.column("TenderNo", minwidth=0, width=200, stretch="no")
        self.treeView2.column("Agency", minwidth=0, width=200, stretch="no")
        self.treeView2.column("AwardAmt", minwidth=0, width=200, stretch="no")
        self.treeView2.column("AwardDate", minwidth=0, width=200, stretch="no")
        self.treeView2.column("TenderDetailStatus", minwidth=0, width=200, stretch="no")
        self.treeView2.column("SuppName", minwidth=0, width=200, stretch="no")

        self.treeView2.place(x=1000, y=200)
        vsb = ttk.Scrollbar(self, orient="vertical", command=self.treeView2.yview)
        vsb.place(x=1685, y=200, height=730)
        self.treeView2.configure(yscrollcommand=vsb.set)

        dict = extract_supplier_not_na_2016()
        for values in dict.items():
            self.treeView2.insert("", 'end', values=values)

    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        self.controller = controller

        """above codes are important"""
        self.button = tk.Button(self, text="Back to Menu", height=2, font=100, command=lambda: controller.show_frame("PageTwo"), fg='black', width=20)
        self.button.place(x=30, y=900)

        #User Input for open function
        self.canvas1 = tk.Canvas(self, width=400, height=300, relief='raised')
        self.canvas1.place(x=30, y=700)
        self.userInput = tk.Entry(self, width=50)
        self.canvas1.create_window(200, 140, window=self.userInput)

        #Header for the Page
        self.label = tk.Label(self, bg="#64dd17", height=10, font=30, text="Function 3")
        self.label.pack(fill="x")

        #Set up of TreeView
        self.treeView = ttk.Treeview(self, height=35)
        # set up the columns and headings
        # In reality "Member ID" would be exported from the database
        self.treeView.pack(expand="no", fill="both")
        self.treeView["columns"] = ["CompanyName", "AwardedAmount"]
        self.treeView["show"] = "headings"
        self.treeView.heading("CompanyName", text="Company Name")
        self.treeView.heading("AwardedAmount", text="Awarded Amount")
        self.treeView.grid(columnspan=2)
        self.treeView.column("CompanyName", minwidth=0, width=480, stretch="no")
        self.treeView.column("AwardedAmount", minwidth=0, width=200, stretch="no")
        self.button = tk.Button(self, height=2, width=50, text="Original Order A-Z", command=self.orderForAtoZ).place(x=30, y=400)
        self.button = tk.Button(self, height=2, width=50, text="Original Order Z-A", command=self.orderForZtoA).place(x=30, y=450)
        self.button = tk.Button(self, height=2, width=50, text="Ascending Order", command=self.ascendingOrder).place(x=30, y=500)
        self.button = tk.Button(self, height=2, width=50, text="Descending Order", command=self.descendingOrder).place(x=30, y=550)
        self.button = tk.Button(self, height=2, width=50, text="TEST", command=self.openFunction1).place(x=30, y=600)
        self.treeView.place(x=1000, y=200)
        vsb = ttk.Scrollbar(self, orient="vertical", command=self.treeView.yview)
        vsb.place(x=1685, y=200, height=730)
        self.treeView.configure(yscrollcommand=vsb.set)

        dict = eachSectorTotalAmtProcurementDefault("government-procurement-via-gebiz.csv")

        for values in dict.items():
            # for values in dict:
            self.treeView.insert("", 'end', values=values)


""""---------------------------------------Function 4---------------------------------------------------------------"""
class Function4Page(tk.Frame):

    def regAwardOrderForAtoZ(self):
        for i in self.treeView.get_children():
            self.treeView.delete(i)

        dict = reg_company_awardAtoZ(supplierNameList, companyNameList, awardList)
        for values in dict.items():
            # for values in dict:
            self.treeView.insert("", 'end', values=values)

    def regAwardOrderForZtoA(self):
        for i in self.treeView.get_children():
            self.treeView.delete(i)

        dict = reg_company_awardZtoA(supplierNameList, companyNameList, awardList)
        for values in dict.items():
            # for values in dict:
            self.treeView.insert("", 'end', values=values)

    def nonRegAwardOrderForAtoZ(self):
        for i in self.treeView.get_children():
            self.treeView.delete(i)

        dict = nonreg_company_awardAtoZ(supplierNameList, companyNameList, awardList)
        print dict
        for values in dict.items():
            self.treeView.insert("", 'end', values=values)

    def nonRegAwardOrderForZtoA(self):
        for i in self.treeView.get_children():
            self.treeView.delete(i)

        dict = nonreg_company_awardZtoA(supplierNameList, companyNameList, awardList)
        print dict
        for values in dict.items():
            self.treeView.insert("", 'end', values=values)

    def top5Companies(self):
        for i in self.treeView.get_children():
            self.treeView.delete(i)

        dict = top5_company(reg_award, nonreg_award)
        print dict
        for values in dict.items():
            self.treeView.insert("", 'end', values=values)

    def regCompanyHighAmtOrder(self):
        for i in self.treeView.get_children():
            self.treeView.delete(i)

        dict = sort_high_amt(reg_award)
        print dict
        for values in dict:
            self.treeView.insert("", 'end', values=values)

    def regCompanyLowAmtOrder(self):
        for i in self.treeView.get_children():
            self.treeView.delete(i)

        dict = sort_low_amt(reg_award)
        print dict
        for values in dict:
            self.treeView.insert("", 'end', values=values)

    def nonRegCompanyHighAmtOrder(self):
        for i in self.treeView.get_children():
            self.treeView.delete(i)

        dict = sort_high_amt(nonreg_award)
        print dict
        for values in dict:
            self.treeView.insert("", 'end', values=values)

    def nonRegCompanyLowAmtOrder(self):
        for i in self.treeView.get_children():
            self.treeView.delete(i)

        dict = sort_low_amt(nonreg_award)
        print dict
        for values in dict:
            self.treeView.insert("", 'end', values=values)

    """def regCompanyYrOrder(self):
        for i in self.treeView.get_children():
            self.treeView.delete(i)

        dict = reg_yr_award(supplierNameList, companyNameList ,awardList, date)
        print dict
        for values in dict.items():
            self.treeView.insert("", 'end', values=values)

    def nonregCompanyYrOrder(self):
        for i in self.treeView.get_children():
            self.treeView.delete(i)

        dict = nonreg_yr_award(supplierNameList, companyNameList ,awardList, date)
        print dict
        for values in dict.items():
            self.treeView.insert("", 'end', values=values)"""

    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        self.controller = controller

        """above codes are important"""
        self.button = tk.Button(self, text="Back to Menu", height=2, font=100, command=lambda: controller.show_frame("PageTwo"), fg='black', width=20)
        self.button.place(x=30, y=900)

        # Header for the Page
        self.label = tk.Label(self, bg="#64dd17", height=10, font=30, text="Function 4")
        self.label.pack(fill="x")

        # Set up of TreeView
        self.treeView = ttk.Treeview(self, height=35)
        # set up the columns and headings
        # In reality "Member ID" would be exported from the database
        self.treeView.pack(expand="no", fill="both")
        self.treeView["columns"] = ["CompanyName", "AwardedAmount"]
        self.treeView["show"] = "headings"
        self.treeView.heading("CompanyName", text="Company Name")
        self.treeView.heading("AwardedAmount", text="Awarded Amount")
        self.treeView.grid(columnspan=2)
        self.treeView.column("CompanyName", minwidth=0, width=480, stretch="no")
        self.treeView.column("AwardedAmount", minwidth=0, width=200, stretch="no")
        self.label = tk.Label(self, height=2, font=30, text="NORMAL FUNCTION").place(x=130,y=250)
        self.button = tk.Button(self, height=2, width=50, text="Registered Award in Order A-Z", command=self.regAwardOrderForAtoZ).place(x=30, y=300)
        self.button = tk.Button(self, height=2, width=50, text="Registered Award in Order Z-A", command=self.regAwardOrderForZtoA).place(x=30, y=350)

        self.button = tk.Button(self, height=2, width=50, text="Non-Registered Award in Order A-Z", command=self.nonRegAwardOrderForAtoZ).place(x=30, y=400)
        self.button = tk.Button(self, height=2, width=50, text="Non-Registered Award in Order Z-A", command=self.nonRegAwardOrderForZtoA).place(x=30, y=450)

        self.label = tk.Label(self, height=2, font=30, text="OPEN FUNCTION", fg="red").place(x=140, y=500)
        self.button = tk.Button(self, height=2, width=50, text="OF - Register Company in Highest Value Order", command=self.regCompanyHighAmtOrder).place(x=30, y=550)
        self.button = tk.Button(self, height=2, width=50, text="OF - Register Company in Lowest Value Order", command=self.regCompanyLowAmtOrder).place(x=30, y=600)
        self.button = tk.Button(self, height=2, width=50, text="OF - Non-Register Company in Highest Value Order", command=self.nonRegCompanyHighAmtOrder).place(x=30, y=650)
        self.button = tk.Button(self, height=2, width=50, text="OF - Non-Register Company in Lowest Value Order", command=self.nonRegCompanyLowAmtOrder).place(x=30, y=700)

        """self.button = tk.Button(self, height=2, width=50, text="OF - Register Company in Year Order", command=self.regCompanyYrOrder).place(x=30, y=750)
        self.button = tk.Button(self, height=2, width=50, text="OF - Non- Register Company in Year Order", command=self.nonregCompanyYrOrder).place(x=30, y=800)"""
        self.treeView.place(x=1000, y=200)
        vsb = ttk.Scrollbar(self, orient="vertical", command=self.treeView.yview)
        vsb.place(x=1685, y=200, height=730)
        self.treeView.configure(yscrollcommand=vsb.set)

        dict = reg_company_awardAtoZ(supplierNameList, companyNameList, awardList)

        for values in dict.items():
            # for values in dict:
            self.treeView.insert("", 'end', values=values)

""""---------------------------------------Function 5---------------------------------------------------------------"""
class Function5Page(tk.Frame):

    def top5Companies(self):
        try:
            self.treeView.destroy()
        except:
            self.treeView2.destroy()

        # Set up of TreeView
        self.treeView = ttk.Treeview(self, height=35)
        # set up the columns and headings
        # In reality "Member ID" would be exported from the database
        self.treeView.pack(expand="no", fill="both")
        self.treeView["columns"] = ["CompanyName", "AwardedAmount"]
        self.treeView["show"] = "headings"
        self.treeView.heading("CompanyName", text="Company Name")
        self.treeView.heading("AwardedAmount", text="Awarded Amount")
        self.treeView.grid(columnspan=2)
        self.treeView.column("CompanyName", minwidth=0, width=480, stretch="no")
        self.treeView.column("AwardedAmount", minwidth=0, width=200, stretch="no")

        self.treeView.place(x=1000, y=200)
        vsb = ttk.Scrollbar(self, orient="vertical", command=self.treeView.yview)
        vsb.place(x=1685, y=200, height=730)
        self.treeView.configure(yscrollcommand=vsb.set)

        dict = top5_company(reg_award, nonreg_award)

        for values in dict.items():
            # for values in dict:
            self.treeView.insert("", 'end', values=values)

    def companyBy2015(self):
        try:
            self.treeView.destroy()
        except:
            self.treeView2.destroy()

        # Set up of TreeView
        self.treeView2 = ttk.Treeview(self, height=35)
        # set up the columns and headings
        # In reality "Member ID" would be exported from the database
        self.treeView2.pack(expand="no", fill="both")
        self.treeView2["columns"] = ["CompanyName", "AwardedYear"]
        self.treeView2["show"] = "headings"
        self.treeView2.heading("CompanyName", text="Company Name")
        self.treeView2.heading("AwardedYear", text="Awarded Year")
        self.treeView2.grid(columnspan=2)
        self.treeView2.column("CompanyName", minwidth=0, width=480, stretch="no")
        self.treeView2.column("AwardedYear", minwidth=0, width=200, stretch="no")

        self.treeView2.place(x=1000, y=200)
        vsb = ttk.Scrollbar(self, orient="vertical", command=self.treeView2.yview)
        vsb.place(x=1685, y=200, height=730)
        self.treeView2.configure(yscrollcommand=vsb.set)

        dict = extract_supplier_not_na_2015()
        for values in dict.items():
            self.treeView2.insert("", 'end', values=values)

    def companyBy2016(self):
        try:
            self.treeView.destroy()
        except:
            self.treeView2.destroy()

        # Set up of TreeView
        self.treeView2 = ttk.Treeview(self, height=35)
        # set up the columns and headings
        # In reality "Member ID" would be exported from the database
        self.treeView2.pack(expand="no", fill="both")
        self.treeView2["columns"] = ["CompanyName", "AwardedYear"]
        self.treeView2["show"] = "headings"
        self.treeView2.heading("CompanyName", text="Company Name")
        self.treeView2.heading("AwardedYear", text="Awarded Year")
        self.treeView2.grid(columnspan=2)
        self.treeView2.column("CompanyName", minwidth=0, width=480, stretch="no")
        self.treeView2.column("AwardedYear", minwidth=0, width=200, stretch="no")

        self.treeView2.place(x=1000, y=200)
        vsb = ttk.Scrollbar(self, orient="vertical", command=self.treeView2.yview)
        vsb.place(x=1685, y=200, height=730)
        self.treeView2.configure(yscrollcommand=vsb.set)

        dict = extract_supplier_not_na_2016()
        for values in dict.items():
            self.treeView2.insert("", 'end', values=values)

    def companyBy2017(self):
        try:
            self.treeView.destroy()
        except:
            self.treeView2.destroy()

        # Set up of TreeView
        self.treeView2 = ttk.Treeview(self, height=35)
        # set up the columns and headings
        # In reality "Member ID" would be exported from the database
        self.treeView2.pack(expand="no", fill="both")
        self.treeView2["columns"] = ["CompanyName", "AwardedYear"]
        self.treeView2["show"] = "headings"
        self.treeView2.heading("CompanyName", text="Company Name")
        self.treeView2.heading("AwardedYear", text="Awarded Year")
        self.treeView2.grid(columnspan=2)
        self.treeView2.column("CompanyName", minwidth=0, width=480, stretch="no")
        self.treeView2.column("AwardedYear", minwidth=0, width=200, stretch="no")

        self.treeView2.place(x=1000, y=200)
        vsb = ttk.Scrollbar(self, orient="vertical", command=self.treeView2.yview)
        vsb.place(x=1685, y=200, height=730)
        self.treeView2.configure(yscrollcommand=vsb.set)

        dict = extract_supplier_not_na_2017()
        for values in dict.items():
            self.treeView2.insert("", 'end', values=values)


    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        self.controller = controller

        """above codes are important"""
        self.button = tk.Button(self, text="Back to Menu", height=2, font=100, command=lambda: controller.show_frame("PageTwo"), fg='black', width=20)
        self.button.place(x=30, y=900)

        # Header for the Page
        self.label = tk.Label(self, bg="#64dd17", height=10, font=30, text="Function 5")
        self.label.pack(fill="x")

        # Set up of TreeView
        self.treeView = ttk.Treeview(self, height=35)
        # set up the columns and headings
        # In reality "Member ID" would be exported from the database
        self.treeView.pack(expand="no", fill="both")
        self.treeView["columns"] = ["CompanyName", "AwardedAmount"]
        self.treeView["show"] = "headings"
        self.treeView.heading("CompanyName", text="Company Name")
        self.treeView.heading("AwardedAmount", text="Awarded Amount")
        self.treeView.grid(columnspan=2)
        self.treeView.column("CompanyName", minwidth=0, width=480, stretch="no")
        self.treeView.column("AwardedAmount", minwidth=0, width=200, stretch="no")

        self.label = tk.Label(self, height=2, font=30, text="NORMAL FUNCTION").place(x=130,y=250)
        self.button = tk.Button(self, height=2, width=50, text="Top 5 Companies", command=self.top5Companies).place(x=30, y=300)

        self.label = tk.Label(self, height=2, font=30, text="OPEN FUNCTION").place(x=130, y=350)
        self.button = tk.Button(self, height=2, width=50, text="Company By 2015", command=self.companyBy2015).place(x=30, y=400)
        self.button = tk.Button(self, height=2, width=50, text="Company By 2016", command=self.companyBy2016).place(x=30, y=450)
        self.button = tk.Button(self, height=2, width=50, text="Company By 2017", command=self.companyBy2017).place(x=30, y=500)

        self.treeView.place(x=1000, y=200)
        vsb = ttk.Scrollbar(self, orient="vertical", command=self.treeView.yview)
        vsb.place(x=1685, y=200, height=730)
        self.treeView.configure(yscrollcommand=vsb.set)

        dict = top5_company(reg_award, nonreg_award)

        for values in dict.items():
            # for values in dict:
            self.treeView.insert("", 'end', values=values)

""""---------------------------------------Function 6---------------------------------------------------------------"""
class Function6Page(tk.Frame):

    def eachGovAgencySpending(self):
        for i in self.treeView.get_children():
            self.treeView.delete(i)

        dict = function6('government-procurement-via-gebiz.csv', 'Categorize_Agency.csv')
        print dict
        for values in dict.items():
            self.treeView.insert("", 'end', values=values)

    def generateSBList(self):
        for i in self.treeView.get_children():
            self.treeView.delete(i)

        dict = generate_sb_list('Categorize_Agency.csv')

        for values in dict.items():
            self.treeView.insert("", 'end', values=values)

    def generateDDList(self):
        for i in self.treeView.get_children():
            self.treeView.delete(i)

        dict = generate_dd_list('Categorize_Agency.csv')

        for values in dict.items():
            self.treeView.insert("", 'end', values=values)


    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        self.controller = controller

        """above codes are important"""
        self.button = tk.Button(self, text="Back to Menu", height=2, font=100, command=lambda: controller.show_frame("PageTwo"), fg='black', width=20)
        self.button.place(x=30, y=900)

        # Header for the Page
        self.label = tk.Label(self, bg="#64dd17", height=10, font=30, text="Function 6")
        self.label.pack(fill="x")

        # Set up of TreeView
        self.treeView = ttk.Treeview(self, height=35)
        # set up the columns and headings
        # In reality "Member ID" would be exported from the database
        self.treeView.pack(expand="no", fill="both")
        self.treeView["columns"] = ["CompanyName", "AwardedAmount"]
        self.treeView["show"] = "headings"
        self.treeView.heading("CompanyName", text="Company Name")
        self.treeView.heading("AwardedAmount", text="Awarded Amount")
        self.treeView.grid(columnspan=2)
        self.treeView.column("CompanyName", minwidth=0, width=480, stretch="no")
        self.treeView.column("AwardedAmount", minwidth=0, width=200, stretch="no")
        self.label = tk.Label(self, height=2, font=30, text="NORMAL FUNCTION").place(x=130,y=350)
        self.button = tk.Button(self, height=2, width=50, text="Categorize Each Government Agency Spending", command=self.eachGovAgencySpending).place(x=30, y=400)

        self.label = tk.Label(self, height=2, font=30, text="OPEN FUNCTION").place(x=140, y=500)
        self.button = tk.Button(self, height=2, width=50, text="Display All SB", command=self.generateSBList).place(x=30, y=550)
        self.button = tk.Button(self, height=2, width=50, text="Display All DD", command=self.generateDDList).place(x=30, y=600)


        self.treeView.place(x=1000, y=200)
        vsb = ttk.Scrollbar(self, orient="vertical", command=self.treeView.yview)
        vsb.place(x=1685, y=200, height=730)
        self.treeView.configure(yscrollcommand=vsb.set)

        dict = top5_company(reg_award, nonreg_award)

        for values in dict.items():
            # for values in dict:
            self.treeView.insert("", 'end', values=values)

if __name__ == "__main__":
    app = SampleApp()
    app.title("ICT1002 PROJECT")
    app.iconbitmap(r'sitlogo_Ncr_icon.ico')

    """image = Image.open('pythonbackground.png')
    photo = ImageTk.PhotoImage(image)
    label = tk.Label(app, image=photo)
    label.image = photo  # keep a reference!
    label.pack(fill="both", expand="yes")"""

    app.state("zoomed")
    app.mainloop()
